{"ast":null,"code":"var _jsxFileName = \"/Users/jocelynshelton/Desktop/Clicky-Game/Clicky-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport MatchCard from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Header\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Pick a different tarot card 12 times in a row to win! Don't click the same card twiec!\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      matches,\n      correctGuesses,\n      bestScore,\n      clickMessage\n    };\n\n    this.setClicked = id => {\n      // copy the state matches array to work with\n      const matches = this.state.matches; // Filter for a match\n\n      const clickedMatch = matches.filter(match => match.id === id); // If the matched image's clicked value is already true, \n      // game over msg\n\n      if (clickedMatch[0].clicked) {\n        console.log(\"Correct Guesses: \" + correctGuesses);\n        console.log(\"Best Score: \" + bestScore);\n        correctGuesses = 0;\n        clickMessage = \"You lose! The card was already clicked. Play again!!\";\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        }\n\n        this.setState({\n          clickMessage\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          matches\n        }); // if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n        // Setmvalue to true\n        clickedMatch[0].clicked = true; // increment counter\n\n        correctGuesses++;\n        clickMessage = \"Keep going, you're on a roll!\";\n\n        if (correctGuesses > bestScore) {\n          bestScore = correctGuesses;\n          this.setState({\n            bestScore\n          });\n        } // Shuffle array to rendered random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      } else {\n        // Set its value to true\n        clickedMatch[0].clicked = true; // restart counter\n\n        correctGuesses = 0; //winner msg\n\n        clickMessage = \"Congrats, Winner!!\";\n        bestScore = 12;\n        this.setState({\n          bestScore\n        });\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        } // Shuffle array to render random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Clicky Tarot Card Game\"), React.createElement(\"h3\", {\n      className: \"scoreSummary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.clickMessage), React.createElement(\"h3\", {\n      className: \"scoreSummary card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Correct Guesses: \", this.state.correctGuesses, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), \"Best Score: \", this.state.bestScore), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.matches.map(match => React.createElement(MatchCard, {\n      setClicked: this.setClicked,\n      id: match.id,\n      key: match.id,\n      image: match.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jocelynshelton/Desktop/Clicky-Game/Clicky-Game/src/App.js"],"names":["React","Component","MatchCard","Wrapper","Title","matches","correctGuesses","bestScore","clickMessage","App","state","setClicked","id","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","render","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MatchCard from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Header\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Pick a different tarot card 12 times in a row to win! Don't click the same card twiec!\";\n\nclass App extends Component {\n    \n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // copy the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for a match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // game over msg\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct Guesses: \" + correctGuesses);\n            console.log (\"Best Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"You lose! The card was already clicked. Play again!!\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Setmvalue to true\n            clickedMatch[0].clicked = true;\n\n            // increment counter\n            correctGuesses++;\n            \n            clickMessage = \"Keep going, you're on a roll!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle array to rendered random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart counter\n            correctGuesses = 0;\n\n            //winner msg\n            clickMessage = \"Congrats, Winner!!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n            \n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle array to render random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Clicky Tarot Card Game</Title>\n        \n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n                \n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses} \n                    <br />\n                    Best Score: {this.state.bestScore} \n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <MatchCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}